name: ci

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write    # needed for OIDC (only used on push to main)
  contents: read

env:
  AWS_REGION: ca-central-1
  AWS_ROLE_ARN: arn:aws:iam::387706002632:role/gh-oidc-deployer
  MLFLOW_TRACKING_URI: sqlite:///${{ github.workspace }}/model_dir/mlflow.db

jobs:
# --- Python quality gates run on both PR and push ---
  python-ci:
    name: Lint • Test • Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4   # Get repository contents

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'    # Use your project Python version

      - name: Cache pip
        uses: actions/cache@v4      # Speed up dependency installs
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies (prod + dev)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black pytest pytest-cov bandit pip-audit
      
      - name: Install dev tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.5.7 black pytest

      - name: Ruff (auto-fix)
        run: |
          ruff check src pipelines test --fix
      - name: Ruff (enforce)
        run: |
          ruff check src pipelines test --output-format=github

      - name: Black (format check)
        run: |
          black --check src pipelines test

      - name: PyTest 
        env:
          # Ensure Python can import 'src' at repo root
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest -q

      - name: Bandit (security SAST)
        run: bandit -q -r src || true   # Set to fail the build later if you prefer

      - name: pip-audit (vuln check)
        run: pip-audit || true          # Start in report-only mode

  # --- Only on push to main: prove OIDC can assume the AWS role ---
  oidc-smoke:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}
          role-duration-seconds: 3600
      
      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Prove we assumed role
        run: aws sts get-caller-identity

  # --- Terraform validate on PR (local backend) and on main (remote backend) ---
  terraform-validate:
    runs-on: ubuntu-latest
    needs: []
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # PR: no AWS, no remote backend. Just format + validate
      - name: Terraform fmt & validate (PR)
        if: github.event_name == 'pull_request'
        working-directory: infra/terraform
        run: |
          terraform init -backend=false
          terraform fmt -check -recursive
          terraform validate

      # main: assume role and validate with the real backend.
      - name: Configure AWS credentials (OIDC)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: tf-validate-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Terraform fmt & validate (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: infra/terraform
        run: |
          terraform init -reconfigure
          terraform fmt -check -recursive
          terraform validate
