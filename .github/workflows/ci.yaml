name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permission:
  id_token: write
  contents: read

env:
  AWS_REGION: ca-central-1
  PYTHON_VERSION: '3.13'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: action/checkout@v4

      - name: Setup PYTHON_VERSION
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION}}
      
      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
      
      - name: Compile dependecies (if requirements.in exists)
        run: |
          if [ -f requirements.in ]; then pip-compile --generate-hashes -o requirements.txt requirements.in; fi
          if [ -f requirements-dev.in ]; then pip-compile --generate-hashes -o requirements-dev.txt requirements-dev.in; fi
      
      - name: Install deps
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Unit tests (pytest optional)
        run: |
          python -m pip install pytest || true
          if command -v pytest >/dev/null 2>&1; then pytest -q || true; fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt & validate (dry)
        run: |
          terraform -chdir=infra/identity fmt -check
          terraform -chdir=infra/identity validate

  assume-role-check:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I
        run: aws sts get-caller-identity